Index: Pre-processing/Unidade2/Atividade_de_casa.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pre-processing/Unidade2/Atividade_de_casa.py b/Pre-processing/Unidade2/Atividade_de_casa.py
--- a/Pre-processing/Unidade2/Atividade_de_casa.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Pre-processing/Unidade2/Atividade_de_casa.py	(date 1731335937195)
@@ -1,0 +1,77 @@
+lista=[]
+with open('dataset\iris_data.csv', 'r') as f:
+    for linha in f.readlines():
+        a=linha.replace('\n','').split(',')
+        lista.append(a)
+
+
+def countclasses(lista):
+    setosa = 0
+    versicolor = 0
+    virginica = 0
+    for i in range(len(lista)):
+        if lista[i][4] == 1.0:
+            setosa += 1
+        if lista[i][4] == 2.0:
+            versicolor += 1
+        if lista[i][4] == 3.0:
+            virginica += 1
+
+    return [setosa, versicolor, virginica]
+
+p=0.6
+setosa,versicolor, virginica = countclasses(lista)
+treinamento, teste= [], []
+max_setosa, max_versicolor, max_virginica = int(p*setosa), int(p*versicolor), int(p*virginica)
+total1 =0
+total2 =0
+total3 =0
+for lis in lista:
+    if lis[-1]==1.0 and total1< max_setosa:
+        treinamento.append(lis)
+        total1 +=1
+    elif lis[-1]==2.0 and total2<max_versicolor:
+        treinamento.append(lis)
+        total2 +=1
+    elif lis[-1]==3.0 and total3<max_virginica:
+        treinamento.append(lis)
+        total3 +=1
+    else:
+        teste.append(lis)
+
+import math
+
+def dist_euclidiana(v1, v2):
+    dim, soma = len(v1), 0
+    for i in range(dim - 1):
+        soma += math.pow(v1[i] - v2[i], 2)
+    return math.sqrt(soma)
+
+
+def knn(treinamento, nova_amostra, K):
+    dists, len_treino = {}, len(treinamento)
+
+    for i in range(len_treino):
+        d = dist_euclidiana(treinamento[i], nova_amostra)
+        dists[i] = d
+
+    k_vizinhos = sorted(dists, key=dists.get)[:K]
+
+    qtd_setosa, qtd_versicolor, qtd_virginica = 0, 0, 0
+    for indice in k_vizinhos:
+        if treinamento[indice][-1] == 1.0:
+            qtd_setosa += 1
+        elif treinamento[indice][-1] == 2.0:
+            qtd_versicolor += 1
+        else:
+            qtd_virginica += 1
+    a = [qtd_setosa, qtd_versicolor, qtd_virginica]
+    return a.index(max(a)) + 1.0
+
+
+acertos, K = 0, 1
+for amostra in teste:
+    classe = knn(treinamento, amostra, K)
+    if amostra[-1]==classe:
+        acertos +=1
+print("Porcentagem de acertos:",100*acertos/len(teste))
\ No newline at end of file
Index: Pre-processing/Unidade1/2_data_types.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.utils import load_volunteer_dataset\r\n\r\nvolunteer = load_volunteer_dataset()\r\n\r\n# Print os primeiros elementos da coluna hits\r\n___\r\n\r\n# Print as caracteristicas da coluna hits\r\n__\r\n\r\n# Converta a coluna hits para o tipo int\r\n___\r\n\r\n# Print as caracteristicas da coluna hits novamente\r\n---\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pre-processing/Unidade1/2_data_types.py b/Pre-processing/Unidade1/2_data_types.py
--- a/Pre-processing/Unidade1/2_data_types.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Pre-processing/Unidade1/2_data_types.py	(date 1731334611663)
@@ -3,13 +3,13 @@
 volunteer = load_volunteer_dataset()
 
 # Print os primeiros elementos da coluna hits
-___
+#print(volunteer.head(["hits"]))
 
 # Print as caracteristicas da coluna hits
-__
+print(volunteer.describe(["hits"]))
 
 # Converta a coluna hits para o tipo int
-___
+
 
 # Print as caracteristicas da coluna hits novamente
----
+
Index: Supervised_Learning/unidade4/1_create_features.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nfrom src.utils import load_sales_clean_dataset\r\n\r\nsales_df = load_sales_clean_dataset()\r\n\r\n# Create X from the radio column's values\r\nX = ____\r\n\r\n# Create y from the sales column's values\r\ny = ____\r\n\r\n# Reshape X\r\nX = ____\r\n\r\n# Check the shape of the features and targets\r\nprint(____)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Supervised_Learning/unidade4/1_create_features.py b/Supervised_Learning/unidade4/1_create_features.py
--- a/Supervised_Learning/unidade4/1_create_features.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Supervised_Learning/unidade4/1_create_features.py	(date 1731938659418)
@@ -1,16 +1,19 @@
 import numpy as np
+import pandas as pd
+
 from src.utils import load_sales_clean_dataset
-
 sales_df = load_sales_clean_dataset()
 
 # Create X from the radio column's values
-X = ____
+X = sales_df.drop("radio", axis=1).values
 
 # Create y from the sales column's values
-y = ____
+y = sales_df["radio"].values
 
 # Reshape X
-X = ____
+X = X[:, 3]
+print(y.shape, X.shape)
+X = X.reshape(-1, 1)
 
 # Check the shape of the features and targets
-print(____)
\ No newline at end of file
+print(X_radio.shape)
\ No newline at end of file
Index: Pre-processing/Unidade1/3_training_and_test_sets.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.utils import load_volunteer_dataset\r\n_____\r\n\r\nvolunteer = load_volunteer_dataset()\r\n\r\n# Exclua as colunas Latitude e Longitude de volunteer\r\nvolunteer_new = __\r\n\r\n# Exclua as linhas com valores null da coluna category_desc de volunteer_new\r\nvolunteer = ___\r\n\r\n# mostre o balanceamento das classes em 'category_desc'\r\nprint(___['category_desc'].__,'\\n','\\n')\r\n\r\n# Crie um DataFrame com todas as colunas, com exceção de ``category_desc``\r\nX = volunteer.__(__, axis=1)\r\n\r\n# Crie um dataframe de labels com a coluna category_desc\r\ny = __[['__']]\r\n\r\n# # Utiliza a a amostragem stratificada para separar o dataset em treino e teste\r\nX_train, X_test, y_train, y_test = __(__, __, stratify=__, random_state=42)\r\n\r\n# mostre o balanceamento das classes em 'category_desc' novamente\r\n___
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pre-processing/Unidade1/3_training_and_test_sets.py b/Pre-processing/Unidade1/3_training_and_test_sets.py
--- a/Pre-processing/Unidade1/3_training_and_test_sets.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Pre-processing/Unidade1/3_training_and_test_sets.py	(date 1731334611682)
@@ -1,13 +1,14 @@
 from src.utils import load_volunteer_dataset
-_____
+from sklearn.model_selection import train_test_split
+
 
 volunteer = load_volunteer_dataset()
 
 # Exclua as colunas Latitude e Longitude de volunteer
-volunteer_new = __
+volunteer_new = volunteer.drop(["Latitude", "Longitude"], axis=1)
 
 # Exclua as linhas com valores null da coluna category_desc de volunteer_new
-volunteer = ___
+volunteer = volunteer.dropna(["category_desc", "volunteer_new"])
 
 # mostre o balanceamento das classes em 'category_desc'
 print(___['category_desc'].__,'\n','\n')
Index: Supervised_Learning/unidade4/2_build_regression.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.utils import load_sales_clean_dataset\r\n\r\nsales_df = load_sales_clean_dataset()\r\n\r\n# Import LinearRegression\r\nfrom ____.____ import ____\r\n\r\n\r\ny = sales_df[\"sales\"].values\r\nX = sales_df[\"radio\"].values.reshape(-1, 1)\r\n\r\n# Create the model\r\nreg = ____()\r\n\r\n# Fit the model to the data\r\n____\r\n\r\n# Make predictions\r\npredictions = ____\r\n\r\nprint(__)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Supervised_Learning/unidade4/2_build_regression.py b/Supervised_Learning/unidade4/2_build_regression.py
--- a/Supervised_Learning/unidade4/2_build_regression.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Supervised_Learning/unidade4/2_build_regression.py	(date 1731938659418)
@@ -3,19 +3,18 @@
 sales_df = load_sales_clean_dataset()
 
 # Import LinearRegression
-from ____.____ import ____
-
+from sklearn.linear_model import LinearRegression
 
 y = sales_df["sales"].values
 X = sales_df["radio"].values.reshape(-1, 1)
 
 # Create the model
-reg = ____()
+reg = LinearRegression()
 
 # Fit the model to the data
-____
+reg.fit(X, y)
 
 # Make predictions
-predictions = ____
+predictions = reg.predict(X)
 
-print(__)
\ No newline at end of file
+print(predictions)
\ No newline at end of file
Index: Supervised_Learning/unidade4/3_visualize_predictions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nfrom src.utils import processing_sales_clean\r\n# Import matplotlib.pyplot\r\nimport ____.____ as ____\r\n\r\nX,y,predictions = processing_sales_clean()\r\n\r\n# Create scatter plot\r\nplt.scatter(____, ____, color=\"____\")\r\n\r\n# Create line plot\r\nplt.plot(____, ____, color=\"____\")\r\nplt.xlabel(\"Radio Expenditure ($)\")\r\nplt.ylabel(\"Sales ($)\")\r\n\r\n# Display the plot\r\nplt.____()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Supervised_Learning/unidade4/3_visualize_predictions.py b/Supervised_Learning/unidade4/3_visualize_predictions.py
--- a/Supervised_Learning/unidade4/3_visualize_predictions.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Supervised_Learning/unidade4/3_visualize_predictions.py	(date 1731938807009)
@@ -1,17 +1,17 @@
 
 from src.utils import processing_sales_clean
 # Import matplotlib.pyplot
-import ____.____ as ____
+import matplotlib.pyplot as plt
 
 X,y,predictions = processing_sales_clean()
 
 # Create scatter plot
-plt.scatter(____, ____, color="____")
+plt.scatter(X, y, color="blue")
 
 # Create line plot
-plt.plot(____, ____, color="____")
+plt.plot(X, predictions, color="red")
 plt.xlabel("Radio Expenditure ($)")
 plt.ylabel("Sales ($)")
 
 # Display the plot
-plt.____()
\ No newline at end of file
+plt.show()
\ No newline at end of file
Index: Supervised_Learning/unidade3/0_class_anotation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.utils import load_churn_dataset\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nimport numpy as np\r\n\r\nchurn_df = load_churn_dataset()\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Supervised_Learning/unidade3/0_class_anotation.py b/Supervised_Learning/unidade3/0_class_anotation.py
--- a/Supervised_Learning/unidade3/0_class_anotation.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Supervised_Learning/unidade3/0_class_anotation.py	(date 1731415367971)
@@ -1,7 +1,32 @@
 from src.utils import load_churn_dataset
 from sklearn.neighbors import KNeighborsClassifier
+from sklearn.model_selection import train_test_split
 import numpy as np
 
 churn_df = load_churn_dataset()
 
+# Obter atributos X e labels y
+X = churn_df[["account_length", "number_customer_service_calls"]].values
+y = churn_df["churn"].values
+
+# Dividir o dataset em treino e teste
+X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)
+
+# Inicialize o classificador KNN.  Atribua 6 vizinhos.
+knn = KNeighborsClassifier(n_neighbors=6)
+
+# Treinar o modelo
+knn.fit(X_train, y_train)
+print(knn.score(X_test,y_test))
+
+# Execute uma predição com a função ``predict`` do ``knn``. Atribua como argumento ``X_test``
+y_pred = knn.predict(X_test)
+
+# Print as predições realizadas``y_pred``
+
+print(y_pred)
+
+# Questão 2
+
+
 
Index: Supervised_Learning/unidade3/1_k-Nearest-Neighbors-Fit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.utils import load_churn_dataset\r\nimport numpy as np\r\n\r\n# Import KNeighborsClassifier\r\nfrom ____.____ import ____\r\n\r\nchurn_df = load_churn_dataset()\r\n\r\n# Create arrays for the features and the target variable\r\ny = ____[\"____\"].values\r\nX = ____[[\"____\", \"____\"]].values\r\n\r\n# Create a KNN classifier with 6 neighbors\r\nknn = ____\r\n\r\n# Fit the classifier to the data\r\nknn.____(____, ____)\r\n\r\nX_test = np.array([[30.0, 17.5],\r\n                  [107.0, 24.1],\r\n                  [213.0, 10.9]])\r\n\r\n# Predict the labels for the X_teste\r\ny_pred = __.__(__)\r\n\r\n# Print the predictions for X_test\r\nprint(\"Predictions: {}\".format(__))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Supervised_Learning/unidade3/1_k-Nearest-Neighbors-Fit.py b/Supervised_Learning/unidade3/1_k-Nearest-Neighbors-Fit.py
--- a/Supervised_Learning/unidade3/1_k-Nearest-Neighbors-Fit.py	(revision 4f5d16364da80cec8cede24d7dedf27cb3409cef)
+++ b/Supervised_Learning/unidade3/1_k-Nearest-Neighbors-Fit.py	(date 1731415670619)
@@ -1,27 +1,32 @@
 from src.utils import load_churn_dataset
+from sklearn.model_selection import train_test_split
 import numpy as np
 
 # Import KNeighborsClassifier
-from ____.____ import ____
+from sklearn.neighbors import KNeighborsClassifier
 
 churn_df = load_churn_dataset()
 
 # Create arrays for the features and the target variable
-y = ____["____"].values
-X = ____[["____", "____"]].values
+X = churn_df[["account_length", "number_customer_service_calls"]].values
+y = churn_df["churn"].values
+
+# Dividir o dataset em treino e teste
+X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)
 
 # Create a KNN classifier with 6 neighbors
-knn = ____
+knn = KNeighborsClassifier(n_neighbors=6)
 
 # Fit the classifier to the data
-knn.____(____, ____)
+knn.fit(X_train, y_train)
+print(knn.score(X_test,y_test))
 
 X_test = np.array([[30.0, 17.5],
                   [107.0, 24.1],
                   [213.0, 10.9]])
 
 # Predict the labels for the X_teste
-y_pred = __.__(__)
+y_pred = knn.predict(X_test)
 
 # Print the predictions for X_test
-print("Predictions: {}".format(__))
\ No newline at end of file
+print("Predictions: {}".format(y_pred))
\ No newline at end of file
